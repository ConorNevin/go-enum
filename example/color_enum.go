// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
)

const (
	// ColorBlack is a Color of type Black
	ColorBlack Color = iota
	// ColorWhite is a Color of type White
	ColorWhite
	// ColorRed is a Color of type Red
	ColorRed
	// ColorGreen is a Color of type Green
	ColorGreen
	// ColorBlue is a Color of type Blue
	ColorBlue
	// ColorGrey is a Color of type Grey
	ColorGrey
	// ColorYellow is a Color of type Yellow
	ColorYellow
)

const _ColorName = "BlackWhiteRedGreenBlueGreyYellow"

var _ColorIndex = [...]uint8{0, 5, 10, 13, 18, 22, 26, 32}

func (i Color) String() string {
	if i < 0 || i >= Color(len(_ColorIndex)-1) {
		return fmt.Sprintf("Color(%d)", i)
	}
	return _ColorName[_ColorIndex[i]:_ColorIndex[i+1]]
}

var _ColorValue = map[string]int{

	"Black":  0,
	"White":  1,
	"Red":    2,
	"Green":  3,
	"Blue":   4,
	"Grey":   5,
	"Yellow": 6,
	"black":  0,
	"white":  1,
	"red":    2,
	"green":  3,
	"blue":   4,
	"grey":   5,
	"yellow": 6,
}

func ParseColor(name string) Color {
	val := Color(0)
	if x, ok := _ColorValue[name]; ok {
		val = Color(x)
	}
	return val
}

func (x *Color) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *Color) UnmarshalText(text []byte) error {
	name := string(text)
	if tmp, ok := _ColorValue[name]; ok {
		*x = Color(tmp)
		return nil
	}
	return fmt.Errorf("%s is not a valid Color", name)
}
