// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3f\x6f\xdb\x3e\x10\x9d\xcd\x4f\xf1\x7e\x82\x7f\x80\x88\xda\x4e\xb2\xba\x55\x97\xa6\x43\x96\x24\x40\x8c\x2e\x86\x51\xb0\xd6\x49\x25\x62\x51\x02\x2d\x1b\x36\x98\xfb\xee\xc5\x51\x72\xeb\xa8\x1a\xba\x89\x77\xf7\xfe\xf0\x1e\x15\xc2\x1c\x39\x15\xd6\x11\x92\x9f\x64\x72\xf2\x09\xb3\xba\xb9\xc1\x97\x3a\x27\x94\xe4\xc8\x9b\x96\x72\xfc\x38\xa3\xac\xe7\xe4\x0e\x95\x34\xef\x9f\xf0\xf8\xb4\xc2\xd7\xfb\x87\xd5\x7f\x4a\x35\x66\xfb\x6a\x4a\x42\x08\x8b\xfe\x93\x59\x29\x5b\x35\xb5\x6f\x91\x2a\x00\x48\x8a\xaa\x4d\x94\x56\x21\x90\xcb\x31\x97\xfe\xb5\xb2\xf0\x8a\xee\xb6\x76\x7b\x81\x84\x80\xa9\xd4\x1e\x4d\x45\x58\x66\x58\xc8\x61\x21\x27\x66\x69\x7a\xe3\x4a\xc2\xd4\x3f\xb8\x9c\x4e\x33\x4c\x8f\x66\x77\xb8\x1a\xfc\x26\xc7\x3d\x98\xa3\x76\x08\x5d\x7f\xf1\xec\xa9\xb0\x27\xca\x3b\x1e\xa9\x5f\x34\x98\x91\xc1\xd6\xad\x89\xae\xc8\xe5\xcc\x4a\xab\xde\xce\xf7\x10\xae\xf5\xa3\xa7\x0c\x49\x08\xfb\xd6\x5b\x57\xda\xe2\xdc\xc9\x82\x39\x51\xea\x68\xfc\x10\x11\x5d\x22\x43\x08\x56\xbe\xae\x01\x4a\x15\x07\xb7\x45\x6a\xf1\x1e\xa2\xf1\x12\xc9\x53\x8d\x4e\x05\x41\x4d\x6c\x01\x8b\x4f\xb8\xc5\xdb\x1b\x2c\x3e\x67\x03\x4c\xba\x23\x97\x8e\x49\xeb\xf9\x9d\x16\xfc\xc4\x53\x7b\xf0\x0e\x45\xd5\x2e\x5e\x1a\x6f\x5d\x5b\xa4\xc9\x80\xe3\xff\x5c\x27\x33\x58\xad\x26\xac\x2e\xf3\x23\x0b\x58\x8f\xe9\xac\xed\x66\x39\x5e\xff\x70\xb7\xd9\x28\x1e\x5d\x4e\xcc\x0a\x19\x2a\xd3\xac\xbb\xab\x6e\x2e\x03\xab\x73\x43\xcc\xa1\x0f\xf1\x1f\x43\x9f\xf7\xa9\xc7\x57\xf7\x3b\xfa\x4e\x2b\x59\xfe\x79\x0c\x71\x9c\x79\xd6\xb3\x77\x99\x5f\xf2\x78\x36\x7e\x4f\x83\xcd\x38\xc9\xbd\x73\xa8\x07\x9b\x97\xe5\x1e\xcd\x4e\xbc\x0c\x40\xb7\x3a\xc6\x76\x9a\xa1\x7e\x95\xf6\xd8\xe5\xd7\xc2\xbc\xf9\x28\x13\x12\x92\x10\xfd\xc5\x73\x7a\x17\xc8\xd1\xec\x54\xfc\x83\x3a\xd7\xbf\x02\x00\x00\xff\xff\xc6\x52\x00\x0b\xc4\x03\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 964, mode: os.FileMode(420), modTime: time.Unix(1502404055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

