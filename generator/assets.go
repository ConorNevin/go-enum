// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xdb\x3c\x10\x3c\x9b\x4f\x31\x9f\x90\x00\x62\x3e\xff\x24\xd7\xb4\xee\xa5\xc9\x21\x87\x26\x01\xe2\xf6\x62\x18\x05\x63\x51\x0e\x11\x89\x12\x28\xda\x95\xc1\xf0\xdd\x8b\xa5\xa4\xd8\x51\x54\xa0\xe9\x4d\xe2\xee\xcc\xee\xce\x0e\xe9\xdc\x04\x89\x4c\x95\x96\x88\x9e\xa4\x48\xa4\x89\xbc\x67\xb3\x19\xbe\x16\x89\xc4\x46\x6a\x69\x84\x95\x09\x1e\xf7\xd8\x14\x13\xa9\xb7\x39\x05\xaf\xee\x70\x7b\xb7\xc0\xf5\xd5\xcd\xe2\x3f\xc6\x4a\xb1\x7e\x16\x1b\x09\xe7\xa6\xed\xa7\xf7\x8c\xa9\xbc\x2c\x8c\x45\xcc\x00\x20\x4a\x73\x1b\x31\xce\x9c\x93\x3a\xc1\x84\xe2\xc7\x95\x89\x97\xea\xae\x0b\x5d\x11\x84\x62\x27\x74\x78\x2b\x72\x89\xcb\x39\xa6\xf4\x33\x0d\x7f\x04\x76\x0e\x46\xe8\x8d\xc4\x89\xb9\xd1\x89\xac\xc7\x38\xd9\x89\x6c\x7b\x94\xfa\x83\x7e\x2b\x78\xcf\x46\xb3\x19\x9c\x6b\xe2\xd3\x7b\x23\x53\x55\xcb\x84\x98\xbc\x87\xaa\x20\x28\xd8\x95\xf2\x1e\x45\x0a\xbb\x2f\xe5\x01\xd2\x9c\x87\x29\xfe\x44\xf3\x96\x61\x0e\x55\x58\x11\x66\x90\x3a\xf1\x9e\x71\xd6\x0e\xf6\xd3\xb9\xc3\x20\xde\x87\x71\xe6\x88\x9c\xab\xac\x51\x7a\xa3\xd2\x7d\xd3\x3d\xbc\x8f\x18\xdb\x09\xd3\x47\x84\x61\x31\x87\x73\x8a\xbe\x8e\x01\x8c\xa5\x5b\xbd\x46\xac\xf0\x16\xc2\xf1\x10\xc8\x63\x8e\xa6\x0a\x1c\x1b\xa9\x14\x0a\x9f\x71\x8e\x97\x17\x28\x7c\x99\xf7\x30\x71\x26\x75\x3c\x54\x9a\x4f\x2e\x38\xe1\x47\x46\xda\xad\xd1\x48\x73\x3b\x7d\x28\x8d\xd2\x36\x8d\xa3\x1e\xc7\x69\xc2\xa3\x31\x14\x67\x23\xcf\xba\xfc\x01\x01\x96\x43\x75\x96\x6a\x75\x39\x7c\xfe\xff\xc5\x6a\xc5\xfc\xa0\x38\x61\xe5\x98\x23\x17\xe5\xb2\x19\x75\xd5\x25\x2c\xf6\xa5\xf4\xde\xb5\x4b\xfc\x4b\xef\x4c\xda\xad\x07\xff\xf6\xec\x10\x5d\x1e\xcc\x10\xd2\xbd\x1f\xb7\xec\xcd\xce\x47\xb4\x7e\x95\x62\x9a\x15\xbf\xa4\x59\x8b\x4a\xc2\xfb\x7f\x2d\x8d\x40\x82\x0f\x75\xd0\x35\xd2\x19\xe3\x5e\x98\x4a\xf6\x56\xa4\xc9\x80\x8d\x54\xbc\x67\x01\xda\xf2\x4e\x64\xd4\x59\x0f\x74\xce\x83\x7f\xea\x31\x8a\x67\x0a\x0f\x6d\x61\x49\xcc\xab\x4f\x94\x41\x6e\x21\xa2\x77\x3c\xf5\x1b\x67\xec\x44\xc6\xc2\xa3\x10\x44\xcb\x85\xa9\x9e\x44\x46\xb6\x6e\x5c\x5d\xe3\xac\x6f\xeb\x6f\x4d\xce\x42\xd6\x36\xe6\x88\x97\xab\xc7\xbd\x95\x63\x48\x63\x0a\x13\x4c\xda\x32\x37\x81\xb8\x9e\x76\xf7\x80\x8f\xa1\x55\xf6\x2a\xcc\x10\xf7\x77\x9d\x1f\xb1\x5b\x59\xdb\x96\x86\x37\xfc\x44\xaf\xdb\xa7\xa9\xd1\x2f\x24\x35\xca\xd8\xbc\xfc\x80\x36\x67\xf5\x7b\x69\x6c\x5e\xf2\xc3\x25\xa3\x66\x8f\x94\xa2\x3b\x77\x4d\x4d\xa4\x71\x74\x5a\xd1\x13\xa6\x0b\x0b\x41\x0a\xaa\xa4\xc7\x14\x8d\x41\xd5\x38\xf3\xac\xf3\xc3\xeb\xc7\xef\x00\x00\x00\xff\xff\x8c\x94\x74\xbb\xfa\x05\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1530, mode: os.FileMode(420), modTime: time.Unix(1502419740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

