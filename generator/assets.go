// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcf\x4f\xf3\x38\x10\x3d\xd7\x7f\xc5\xdb\x08\xa4\x84\xed\x0f\xb8\xb2\xdb\xbd\x2c\x1c\x38\x2c\x20\xd1\xfd\x2e\x55\x85\x4c\x33\x29\x16\x89\x93\xcf\x71\xfb\xa5\x32\xfe\xdf\x3f\x4d\x9c\xd2\x12\x8a\x04\xa7\x38\x9e\x79\x6f\x66\x9e\x9f\xed\xdc\x08\x29\x65\x4a\x13\xa2\x67\x92\x29\x99\xc8\x7b\x31\x99\xe0\xdf\x32\x25\xac\x48\x93\x91\x96\x52\x3c\x6d\xb1\x2a\x47\xa4\xd7\x05\x07\xaf\xee\x70\x7b\x37\xc3\xf5\xd5\xcd\xec\x0f\x21\x2a\xb9\x7c\x91\x2b\x82\x73\xe3\x6e\xe9\xbd\x10\xaa\xa8\x4a\x63\x11\x0b\x00\x88\xb2\xc2\x46\x22\x11\xce\x91\x4e\x31\xe2\xf8\x61\x65\xe6\xe5\xba\xcb\x52\xd7\x0c\xe1\xd8\x09\x6f\xde\xca\x82\x70\x39\xc5\x98\x7f\xc6\xed\x1f\x83\x9d\x83\x91\x7a\x45\x38\x31\x37\x3a\xa5\x66\x88\x93\x8d\xcc\xd7\x07\xa9\x3f\xf8\xb7\x86\xf7\x62\xe0\x1c\x54\x06\xfa\xd9\xe5\x04\x96\xe8\x31\xf2\x7e\x32\xc1\xc3\x8b\xaa\x2a\x4a\xd1\x86\x9c\xa3\xbc\xa6\x76\xdf\xb9\x2e\xfb\xde\x50\xa6\x1a\x4a\x19\xe5\x3d\x54\x0d\xc9\xc1\x5d\x73\xde\xa3\xcc\x60\xb7\x15\xed\x21\x61\xbf\x1d\xd5\xfb\x76\xfc\xcf\xd8\x78\xce\xae\xb7\x30\x08\xce\xc1\xc8\x43\xfa\x29\x54\x69\xe5\x8e\x8d\x11\x61\x95\x88\x4e\xae\x47\xe7\xf6\xf2\x78\xdf\x8e\x37\x45\xe4\x5c\x6d\x8d\xd2\x2b\x95\x6d\x83\x26\xf0\x3e\x12\x62\x23\x4d\x1f\x11\x2a\x4f\xe1\x9c\xe2\xd5\x21\x40\x88\x6c\xad\x97\x88\x15\xde\x43\x12\x3c\xb4\xe4\x71\x82\x50\x05\x4e\x0c\x54\x06\x85\xbf\x71\x8e\xd7\x57\x28\xfc\x33\xed\x61\xe2\x9c\x74\x7c\xac\x74\x32\xba\x48\x18\x3f\x30\x64\xd7\x46\x23\x2b\xec\xf8\xa1\x32\x4a\xdb\x2c\x8e\x7a\x1c\xa7\x69\x12\x0d\xa1\x12\x31\xf0\x62\x97\x7f\x44\x80\xf9\xb1\x3a\x73\xb5\xb8\x3c\xbe\xff\xe7\xc5\x62\x21\xfc\x51\x71\x5a\x23\x61\x8a\x42\x56\xf3\x30\xea\x62\x97\x30\xdb\x56\x7c\xce\xdd\x09\x7f\xd1\x91\x23\x3e\x5f\x95\x41\xd3\x47\x3f\x8a\x41\xd4\x33\x51\x74\xb9\xf7\x4e\x4b\xe0\xfd\xb0\xb3\xc2\xdb\x47\x65\x18\xe7\xe5\x2f\x32\x4b\x59\x53\x6b\x9f\x2f\x5f\x8e\x70\x35\x3e\x6d\x05\x2d\x2d\xbe\xdd\x51\x30\xe8\xce\x3c\xf7\xd2\xd4\xd4\x3b\x46\xcd\x85\x82\x9c\x49\xcf\x26\xec\x84\x8d\xcc\xb9\xdb\x1e\xe8\x3c\x69\x3d\xd6\x0c\x51\xbe\x70\xf8\xd8\x49\xcd\x99\x79\xf1\x17\x67\xb0\xa3\x98\xe8\x03\x4f\xf3\xce\x3d\x1b\x99\x8b\xf6\x39\x62\x29\xc6\x85\x34\xf5\xb3\xcc\xd9\xfa\xc1\xf9\x0d\xce\xfa\xd6\xff\x2f\xe4\xcc\xa8\xb1\x71\x82\x78\xbe\x78\xda\x5a\x1a\x82\x8c\x29\x4d\x6b\xe4\x8e\x39\x04\xe2\x66\xbc\xbb\x2b\xc9\x10\x5a\xe5\x6f\xc2\x1c\xe3\xfe\x5f\x17\x07\xec\x96\x1a\xdb\xd1\x24\x81\x9f\xe9\x75\xf7\x28\x06\xfd\xda\xa4\xa0\x8c\x2d\xaa\x6f\x68\x73\xd6\x7c\x94\xc6\x16\x55\xb2\xbf\x88\xdc\xec\x81\x52\x7c\x2f\xaf\xb9\x89\x2c\x8e\x4e\x6b\x7e\x0a\x75\x69\x21\x59\x41\x95\xf6\x98\xa2\x21\xb8\x5a\x22\xbc\xd8\xf9\xe1\x6d\xf1\x3b\x00\x00\xff\xff\x1f\x40\xde\xdb\x74\x06\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1652, mode: os.FileMode(420), modTime: time.Unix(1502467506, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

