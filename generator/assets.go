// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xda\x40\x10\x3d\x67\x7f\xc5\xab\x45\x25\xaf\x0a\x24\xb9\xd2\xba\x97\xa6\x87\x5c\x92\x4a\x41\xbd\x20\x14\x6d\xf1\xd8\x5d\x05\xaf\xad\xc5\x20\xd0\x66\xfe\x7b\x35\x6b\xa3\x82\xa1\x52\x6f\x3b\x9e\x79\x1f\x3b\x6f\x1d\xc2\x04\x39\x15\xd6\x11\x92\xdf\x64\x72\xf2\x09\xb3\xba\xbd\xc5\xb7\x3a\x27\x94\xe4\xc8\x9b\x96\x72\xfc\x3a\xa0\xac\x27\xe4\xb6\x95\x34\x1f\x9e\xf1\xf4\x3c\xc7\xf7\x87\xc7\xf9\x07\xa5\x1a\xb3\x7a\x33\x25\x21\x84\x69\x7f\x64\x56\xca\x56\x4d\xed\x5b\xa4\x0a\x00\x92\xa2\x6a\x13\xa5\x55\x08\xe4\x72\x4c\xa4\x7f\xaa\x2c\xbc\xa2\xbb\xaa\xdd\x46\x20\x21\x60\x24\xdf\x9e\x4c\x45\x98\x65\x98\x4a\x31\x95\x8a\x59\x9a\xde\xb8\x92\x30\xf2\x8f\x2e\xa7\xfd\x18\xa3\x9d\x59\x6f\x4f\x06\x7f\x4a\xb9\x01\x73\xd4\x0e\xa1\xeb\xf7\x78\xa9\x8f\xdc\xcc\xc8\x60\xeb\xd6\x44\x37\xe4\x72\x66\xa5\x55\x6f\xe3\x35\x84\x53\xdd\x57\x27\x66\x32\x24\x21\x6c\x5a\x6f\x5d\x69\x8b\x43\xa7\x07\xe6\x44\xa9\x9d\xf1\x17\x10\x2b\xfe\x90\x21\x84\x78\x3a\x45\x28\x55\x6c\xdd\x0a\xa9\xc5\x39\x46\xe3\x25\xb2\xa7\x1a\x9d\x0c\x82\xba\xb1\x05\x2c\xbe\xe0\x0e\xef\xef\xb0\xf8\x9a\x0d\x30\xe9\x9a\x5c\x7a\x55\x5b\x4f\xee\xb5\x10\xdc\x78\x6a\xb7\xde\xa1\xa8\xda\xe9\x4b\xe3\xad\x6b\x8b\x34\x19\x90\x7c\xcc\x75\x32\x86\xd5\xea\x86\xd5\x71\xfe\xda\x0e\x16\x57\x95\x16\x76\x39\xfb\x47\xe3\xd3\xfd\x72\xa9\xb8\xdb\xd0\xf9\x44\x0c\x0a\x19\x2a\xd3\x2c\xba\xdb\x2e\x8f\x03\xf3\x43\x43\xcc\xa1\x4f\xf0\x3f\x13\x9f\xf4\x91\xc7\x27\x37\xc8\x3d\x99\xfd\x7d\x09\x71\x9c\x79\xdc\xb3\x77\xc1\x1f\x23\xf9\x61\xfc\x86\x06\xbb\x89\xd9\x77\x0e\xf5\xe0\x0e\xb2\xde\x9d\x59\x8b\x97\x01\xe8\x4e\xc7\xe4\xf6\x63\xd4\x6f\x97\xed\xe8\x61\x21\xc4\xcb\xcf\x32\x20\x29\x09\xcf\x05\xcd\xfe\x2c\x91\x9d\x59\xab\xf8\xf7\x74\xa6\xff\x04\x00\x00\xff\xff\x21\x96\x54\x7a\xc0\x03\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 960, mode: os.FileMode(420), modTime: time.Unix(1502401967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

