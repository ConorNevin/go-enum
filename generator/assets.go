// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcf\x4f\xf3\x38\x10\x3d\xd7\x7f\xc5\xdb\x08\xa4\x84\xed\x0f\xb8\xb2\xdb\xbd\x2c\x1c\x38\x2c\x20\xd1\xfd\x2e\x55\x85\x4c\x33\x29\x16\x89\x93\xcf\x71\xfb\xa5\x32\xfe\xdf\x3f\x4d\x9c\xd2\x12\x8a\x04\xa7\x38\x9e\x79\x6f\xc6\x6f\x9e\xed\xdc\x08\x29\x65\x4a\x13\xa2\x67\x92\x29\x99\xc8\x7b\x31\x99\xe0\xdf\x32\x25\xac\x48\x93\x91\x96\x52\x3c\x6d\xb1\x2a\x47\xa4\xd7\x05\x07\xaf\xee\x70\x7b\x37\xc3\xf5\xd5\xcd\xec\x0f\x21\x2a\xb9\x7c\x91\x2b\x82\x73\xe3\x6e\xe9\xbd\x10\xaa\xa8\x4a\x63\x11\x0b\x00\x88\xb2\xc2\x46\x22\x11\xce\x91\x4e\x31\xe2\xf8\x61\x65\xe6\xe5\xba\xcb\x52\xd7\x0c\xe1\xd8\x09\x6f\xde\xca\x82\x70\x39\xc5\x98\x7f\xc6\xed\x1f\x83\x9d\x83\x91\x7a\x45\x38\x31\x37\x3a\xa5\x66\x88\x93\x8d\xcc\xd7\x07\xa9\x3f\xf8\xb7\x86\xf7\x62\xe0\x1c\x54\x06\xfa\xd9\xe5\x04\x96\xe8\x31\xf2\x7e\x32\xc1\xc3\x8b\xaa\x2a\x4a\xd1\x86\x9c\xa3\xbc\xa6\x76\xdf\xb9\x2e\xfb\xde\x50\xa6\x1a\x4a\x19\xe5\x3d\x54\x0d\xc9\xc1\x5d\x73\xde\xa3\xcc\x60\xb7\x15\xed\x21\x61\xbf\x3d\xaa\xf7\xed\xf1\x3f\x63\xdb\xb7\x16\xce\x81\x73\x30\xf0\x90\x7d\x0a\x55\x5a\xb9\x23\x63\x61\xc2\x2a\x11\x9d\x5a\x8f\xce\xed\xd5\xf1\xbe\x3d\xdd\x14\x91\x73\xb5\x35\x4a\xaf\x54\xb6\x0d\x92\xc0\xfb\x48\x88\x8d\x34\x7d\x44\xa8\x3c\x85\x73\x8a\x57\x87\x00\x21\xb2\xb5\x5e\x22\x56\x78\x0f\x49\xf0\xd0\x92\xc7\x09\x42\x15\x38\x31\x50\x19\x14\xfe\xc6\x39\x5e\x5f\xa1\xf0\xcf\xb4\x87\x89\x73\xd2\xf1\xb1\xd2\xc9\xe8\x22\x61\xfc\xc0\x90\x5d\x1b\x8d\xac\xb0\xe3\x87\xca\x28\x6d\xb3\x38\xea\x71\x9c\xa6\x49\x34\x84\x4a\xc4\xc0\x8b\x5d\xfe\x11\x01\xe6\xc7\xea\xcc\xd5\xe2\xf2\xf8\xfe\x9f\x17\x8b\x85\xf0\x47\xc5\x69\x7d\x84\x29\x0a\x59\xcd\xc3\x51\x17\xbb\x84\xd9\xb6\xe2\x31\x77\x03\xfe\xa2\x21\x47\x3c\x5f\x95\x41\xd3\x47\x3b\x8a\x41\xd4\xf3\x50\x74\xb9\xb7\x4e\x4b\xe0\xfd\xb0\xb3\xc2\xdb\x47\x65\x18\xe7\xe5\x2f\x32\x4b\x59\x53\x6b\x9f\x2f\xdf\x8d\x60\xbf\x4f\x5b\x41\x4b\x8b\x6f\x77\x14\x0c\xba\x33\xcf\xbd\x34\x35\xf5\xc6\xa8\xb9\x50\x90\x33\xe9\xd9\x84\x9d\xb0\x91\x39\x77\xdb\x03\x9d\x27\xad\xc7\x9a\x21\xca\x17\x0e\x1f\x9b\xd4\x9c\x99\x17\x7f\x71\x06\x3b\x8a\x89\x3e\xf0\x34\xef\xdc\xb3\x91\xb9\x68\x5f\x23\x96\x62\x5c\x48\x53\x3f\xcb\x9c\xad\x1f\x9c\xdf\xe0\xac\x6f\xfd\xff\x42\xce\x8c\x1a\x1b\x27\x88\xe7\x8b\xa7\xad\xa5\x21\xc8\x98\xd2\xb4\x46\xee\x98\x43\x20\x6e\xc6\xbb\xbb\x92\x0c\xa1\x55\xfe\x26\xcc\x31\xee\xff\x75\x71\xc0\x6e\xa9\xb1\x1d\x4d\x12\xf8\x99\x5e\x77\x6f\x62\xd0\xaf\x4d\x0a\xca\xd8\xa2\xfa\x86\x36\x67\xcd\x47\x69\x6c\x51\x25\xfb\x8b\xc8\xcd\x1e\x28\xc5\xf7\xf2\x9a\x9b\xc8\xe2\xe8\xb4\xe6\x97\x50\x97\x16\x92\x15\x54\x69\x8f\x29\x1a\x82\xab\x25\xc2\x8b\x9d\x1f\xde\x16\xbf\x03\x00\x00\xff\xff\x43\xc2\x73\xed\x73\x06\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1651, mode: os.FileMode(420), modTime: time.Unix(1502469637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

