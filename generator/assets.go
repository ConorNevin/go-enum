// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdc\x36\x10\x3d\x2f\x7f\xc5\x8b\xe0\x00\x62\xaa\x5d\x3b\x57\xb7\xdb\x4b\x93\x43\x0e\x4d\x02\xd8\xed\x65\xb1\x08\x98\xd5\x68\x43\x78\x45\xa9\x14\xed\x6a\xc1\xf0\xbf\x17\x43\x4a\xb6\xac\xca\x40\x72\x12\xc5\x99\xf7\xe6\xeb\x71\xbc\x5f\xa3\xa4\x4a\x1b\x42\xf6\x8d\x54\x49\x36\x0b\x41\x5c\x5e\xe2\x8f\xa6\x24\x1c\xc9\x90\x55\x8e\x4a\x7c\x3d\xe3\xd8\xac\xc9\xdc\xd7\x6c\x7c\xf7\x09\x1f\x3f\xdd\xe2\xfd\xbb\x0f\xb7\xaf\x84\x68\xd5\xe1\x4e\x1d\x09\xde\x6f\x86\x63\x08\x42\xe8\xba\x6d\xac\x43\x2e\x00\x20\xab\x6a\x97\x09\x29\xbc\x27\x53\x62\xcd\xf6\x69\x64\xe6\xe5\xb8\x87\xc6\x74\x0c\x61\xdb\x05\x5f\x7e\x54\x35\xe1\x7a\x8b\x0d\xff\x6c\xe2\x1f\x83\xbd\x87\x55\xe6\x48\xb8\xb0\x1f\x4c\x49\x7d\x81\x8b\x07\x75\xba\x9f\xb8\xfe\xcd\xbf\x1d\x42\x10\x2b\xef\xa1\x2b\xd0\x3f\x83\x4f\x62\xc9\xbe\x64\x21\x5c\x5e\xe2\xe6\x4e\xb7\x2d\x95\x88\x26\xef\xe9\xd4\x51\xbc\xf7\x7e\xf0\xfe\x6c\xa9\xd2\x3d\x95\x8c\x0a\x01\xba\x83\x62\xe3\x98\x5c\x08\x68\x2a\xb8\x73\x4b\x4f\x90\x74\x1f\x4b\x0d\x21\x96\xff\x12\xdb\x53\x6a\xa9\x0e\x5c\x81\x81\x53\xf6\x2d\x74\xe3\xd4\x48\xc6\x8d\x49\x27\x29\x86\x6e\x7d\xf1\xfe\xa9\x3b\x21\xc4\xea\xb6\xc8\xbc\xef\x9c\xd5\xe6\xa8\xab\x73\x6a\x09\x42\xc8\x84\x78\x50\x76\x8e\x48\x91\xb7\xf0\x5e\xf3\x69\x0a\x10\xa2\xba\x37\x07\xe4\x1a\xcf\x21\x12\x37\x91\x3c\x97\x48\x51\xe0\xc5\x4a\x57\xd0\xf8\x0d\x57\xf8\xfe\x1d\x1a\xbf\x6f\x67\x98\xfc\x44\x26\x5f\x0a\x2d\xd7\x6f\x25\xe3\x57\x96\xdc\xbd\x35\xa8\x6a\xb7\xb9\x69\xad\x36\xae\xca\xb3\x19\xc7\xeb\x52\x66\x05\xb4\x14\xab\x20\x46\xff\x85\x06\xec\x96\xe2\xec\xf4\xfe\x7a\xf9\xfe\x97\xb7\xfb\xbd\x08\x8b\xcd\x89\x3a\xc2\x16\xb5\x6a\x77\xa9\xd4\xfd\xe8\x70\x7b\x6e\x79\xcc\xc3\x80\x7f\x50\x90\x6b\x9e\xaf\xae\x60\xe8\xff\x72\x14\xab\x6c\xa6\xa1\xec\xfa\x49\x3a\x91\x20\x84\x62\x90\xc2\xe3\x47\x57\xd8\x9c\x9a\x7f\xc9\x1e\x54\x47\x51\x3e\x3f\xfc\x36\x92\xfc\x5e\x4c\x05\x91\x16\x3f\x9d\x51\x12\x68\x10\xbc\x29\x3e\x2b\xdb\xd1\xf3\x96\x42\x39\x47\x75\xeb\x3a\xb8\x06\x87\xc6\x3c\x90\x75\x50\xa3\x90\x5c\x13\x1f\xd8\x14\x90\x44\xb8\xc0\x94\x1b\x4e\x38\x01\x25\xf2\xe7\xc6\x02\x64\x6d\x63\xe5\x20\xcd\xbe\x40\x73\xc7\x3d\x58\x1a\xf0\x8e\x89\xf6\xbf\xb2\xc7\x44\x88\xb3\x60\xbd\x2c\x60\xf4\x69\x2a\xbd\x99\xc7\x95\x2c\xa2\x7a\xdf\x73\xe0\x2a\xcf\x5e\x77\xbc\x2f\x4c\xc3\xe5\x3d\xa8\x93\x2e\x67\x80\xac\x00\x07\x96\x22\xae\x43\x9e\xc5\xa6\x56\xb6\xfb\xa6\x4e\x18\xab\xce\x7b\xbc\x99\xbf\xbd\x3f\x93\xcf\x2d\xf5\x2e\x97\xc8\x77\xfb\xaf\x67\x47\xd3\x72\x87\xec\x92\x21\xef\x37\xe3\x63\x1d\x0a\x78\x7c\xd6\x0b\xdc\x7f\x99\x7a\xc2\xee\xa8\x77\x03\x8d\x4c\xfc\x4c\x6f\x86\xa5\x9c\x1a\x1f\x9d\xa4\x58\xb9\xba\x8d\x39\xb0\xe5\xa5\x59\xc9\x38\x0a\x76\x7a\xb5\xe5\x54\xa6\xdd\x26\x6b\x63\x6b\xdf\xf0\x2e\x72\x75\xfb\x58\x46\x4a\x79\x94\xd5\xe3\xe1\xbf\x00\x00\x00\xff\xff\xae\xb6\xf8\xea\xba\x06\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1722, mode: os.FileMode(420), modTime: time.Unix(1502475635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

