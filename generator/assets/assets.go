// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x8f\xdb\x36\x10\x3d\x8b\xbf\x62\x22\x6c\x00\x31\xd5\x6a\x73\x6e\xe1\x43\xd1\x2c\xd0\x1c\x36\x09\x60\xb7\x97\x45\x10\x73\xad\x91\x4d\xac\x44\xaa\x24\xed\xc8\x20\xf8\xdf\x8b\x21\x25\x5b\x76\xd7\xe8\x8d\x1f\xf3\x1e\xe7\xbd\x99\xa1\xf7\xf7\x50\x63\x23\x15\x42\xbe\x43\x51\xa3\xc9\x43\x60\x0f\x0f\xf0\x87\xae\x11\xb6\xa8\xd0\x08\x87\x35\xbc\x1c\x61\xab\xef\x51\xed\x3b\xba\xfc\xf4\x15\xbe\x7c\x5d\xc1\xe3\xa7\xcf\xab\x77\x8c\xf5\x62\xf3\x2a\xb6\x08\xde\x57\xe3\x32\x04\xc6\x64\xd7\x6b\xe3\xa0\x60\x00\x00\x79\xd3\xb9\x9c\x71\xe6\x3d\xaa\x1a\xee\xe9\x7e\xfe\x32\xf1\xd2\xbb\x1b\xad\x2c\x41\xe8\xee\x8e\x0e\xbf\x88\x0e\xe1\xd7\x05\x54\xb4\xa9\xe2\x8e\xc0\xde\x83\x11\x6a\x8b\x70\x67\x3e\xab\x1a\x87\x12\xee\x0e\xa2\xdd\xcf\x42\xff\xa6\xad\x85\x10\x58\xe6\x3d\xc8\x06\xf0\x9f\x31\x26\xb1\xe4\x3f\xf2\x10\x1e\x1e\x60\xf9\x2a\xfb\x1e\x6b\x88\x57\xde\x63\x6b\x31\x9e\x7b\x3f\x46\x7f\x33\xd8\xc8\x01\x6b\x42\x85\x00\xd2\x82\xa0\xcb\x29\xb9\x10\x40\x37\xe0\x8e\x3d\x9e\x21\xe9\x3c\x4a\x0d\x21\xca\xbf\xc5\x76\x4e\x2d\xe9\x80\x8f\x40\xc0\x39\xfb\x02\xa4\x76\x62\x24\x1b\x01\xea\x24\x7c\xd2\x14\xe5\xde\xc0\xc2\x2f\xe0\xbd\xdd\xbf\x5c\xc6\x4e\x04\xe7\x44\xc9\xf4\xb4\xe2\x54\x1d\x70\xd8\xf5\xad\x70\x08\xb9\x75\x46\xaa\x2d\x9a\x1c\x2a\x72\x94\x3a\xe0\x9b\x30\x16\xbd\x3f\xd7\x25\x04\x10\x8e\x20\xce\x82\xd3\xb0\xd1\xea\x80\xc6\x81\x80\x04\xa6\x33\x32\x6e\x0e\x60\xcd\x5e\x6d\xde\x62\x2a\x14\x95\x28\x01\x39\x14\x97\x97\x25\xa0\x31\xda\x70\xf0\x2c\x93\x0d\x0c\x25\xe8\x57\xaa\xfb\x8f\xcb\xb0\xa8\xf2\x99\x88\xbe\xff\x46\x11\x9e\x65\x99\x41\xb7\x37\xea\x2a\x8b\x62\xe0\x25\x28\xd9\xb2\x2c\x24\x77\x2b\xd1\xb6\xfa\xe7\xe3\xe0\x50\x59\xa9\x55\x6a\x22\xd9\x8c\xf9\xd8\xea\x4f\x61\x53\x19\x63\x9a\x25\xac\xaf\xf8\xd6\x9c\xde\xa2\x29\xd1\x60\x75\x87\x6e\x47\xfa\x37\x5a\xb7\xb0\x43\x83\x2c\xcb\x86\xa9\xad\x27\xca\x95\x91\xdd\x72\xdf\x10\xe7\xfc\xe8\x7f\x9e\x29\x61\xcd\xd7\x9c\xf8\xa2\x27\x23\x21\x39\x5f\xfd\xee\xb4\x2c\xe2\x33\xfc\xa6\xee\x69\xbb\x3a\xf6\xc9\x06\x1e\x69\xa2\x0f\xa9\x0f\x6e\x00\x3f\xf2\x12\x9a\xce\x55\x8f\x54\x87\xa6\xc8\xdf\x5b\x1a\x0b\xa5\xa9\xda\x07\xd1\xca\xfa\x0a\x90\x97\xa0\x62\x26\x71\xea\xa3\xc5\x9d\x30\x76\x27\x5a\x98\x9a\xa0\x18\xe0\xc3\x25\x88\xc3\x53\x8a\x59\xe1\xe0\x0a\x0e\xc5\xf3\xf7\x97\xa3\xc3\x79\xf5\xc7\xec\xd2\x45\x31\x54\xcb\x68\x5d\xc1\xc7\x7a\x06\x76\x9b\xfb\x2f\xd5\xcd\xd8\x1d\x0e\x6e\xa4\xe1\x89\x9f\xe8\xd5\x45\x91\x62\x10\x67\x99\xeb\xfa\x93\xdb\xb7\x5a\x97\xc7\x7e\xa1\xa0\x77\x0b\x4a\x65\xde\x7c\xc9\x61\x96\x7d\x18\x60\x01\xae\xeb\x4f\x32\x52\xca\x93\xf5\xe7\xc5\xc5\x47\x79\x9a\xc4\xd3\x67\x79\xd5\xf6\xb1\xb3\x16\x90\x7b\x3f\xe6\x2d\x9b\x63\xfa\x12\x21\x84\x9c\xb1\x83\x30\xd7\x90\x27\xd1\xc3\x82\x7e\x96\x4e\xf4\xf3\x68\x36\xf9\x27\xe1\xda\xbe\xc9\xe9\x69\xb8\xfd\x34\x20\x37\x86\xf1\x49\xf4\xcf\xf2\x3f\x73\x68\x5d\xb2\x62\xdc\x52\x4b\x2d\x7b\x23\x95\x6b\x8a\xfc\xca\xd5\xf7\x35\xcf\x4b\x90\xb1\x85\xde\x90\x90\xbe\xb4\x28\x62\xaf\x2e\x64\x54\xad\xfe\x89\x66\x23\x2c\xc2\xcc\xd5\x7f\x03\x00\x00\xff\xff\xee\x15\x45\x62\xf6\x06\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 1782, mode: os.FileMode(420), modTime: time.Unix(1512692615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

