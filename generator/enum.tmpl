{{- define "header"}}
// Code generated by go-enum
// DO NOT EDIT!

package {{.package}}

import (
    "fmt"
)
{{end -}}

{{- define "enum"}}
const (
{{ $enumName := .enum.Name}}
{{ range $rIndex, $value := .enum.Values }}
	// {{$value.PrefixedName}} is a {{$enumName}} of type {{$value.Name}}
    {{$value.PrefixedName}} {{$enumName}} = iota
{{- end}}
)

const _{{.enum.Name}}Name = "{{stringify .enum }}"

var _{{.enum.Name}}Index = {{indexify .enum }}

func (i {{.enum.Name}}) String() string {
	if i < 0 || i >= {{.enum.Name}}(len(_{{.enum.Name}}Index)-1) {
		return fmt.Sprintf("{{.enum.Name}}(%d)", i)
	}
	return _{{.enum.Name}}Name[_{{.enum.Name}}Index[i]:_{{.enum.Name}}Index[i+1]]
}

var _{{.enum.Name}}Value = map[string]{{.enum.Type}}{
    {{ range $rIndex, $value := .enum.Values -}}
        "{{$value.Name}}": {{$value.Value}},
    {{end}}
}

func Parse{{.enum.Name}}(name string) {{.enum.Name}} {
	val := {{.enum.Name}}(0)
	if x, ok := _{{.enum.Name}}Value[name]; ok {
		val = {{.enum.Name}}(x)
	}
	return val
}

{{end}}
