{{- define "header"}}
// Code generated by go-enum
// DO NOT EDIT!

package {{.package}}

import (
    "fmt"
)
{{end -}}

{{- define "enum"}}
const (
{{- $enumName := .enum.Name -}}
{{ range $rIndex, $value := .enum.Values }}
	{{ if eq $value.Name "_"}}// Skipped value{{else}}// {{$value.PrefixedName}} is a {{$enumName}} of type {{$value.Name}}{{end}}
    {{$value.PrefixedName}} {{- if eq $rIndex 0 }}{{$enumName}} = iota{{end}}
{{- end}}
)

const _{{.enum.Name}}Name = "{{stringify .enum }}"

var _{{.enum.Name}}Index = {{indexify .enum }}

func (i {{.enum.Name}}) String() string {
	if i < 0 || i >= {{.enum.Name}}(len(_{{.enum.Name}}Index)-1) {
		return fmt.Sprintf("{{.enum.Name}}(%d)", i)
	}
	return _{{.enum.Name}}Name[_{{.enum.Name}}Index[i]:_{{.enum.Name}}Index[i+1]]
}

var _{{.enum.Name}}Value = map[string]{{.enum.Type}}{
    {{ range $rIndex, $value := .enum.Values -}}{{if ne $value.Name "_"}}
	"{{$value.Name}}": {{$value.Value}},{{end}}{{end}}{{if .lowercase }}{{ range $rIndex, $value := .enum.Values }}{{ if ne $value.Name "_"}}
	"{{ lower $value.Name}}": {{$value.Value}},{{end}}{{end}}{{end}}
}

func Parse{{.enum.Name}}(name string) {{.enum.Name}} {
	val := {{.enum.Name}}(0)
	if x, ok := _{{.enum.Name}}Value[name]; ok {
		val = {{.enum.Name}}(x)
	}
	return val
}

{{ if .marshal }}
func (x *{{.enum.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *{{.enum.Name}}) UnmarshalText(text []byte) error {
	name := string(text)
	if tmp, ok := _{{.enum.Name}}Value[name]; ok {
		*x = {{.enum.Name}}(tmp)
		return nil
	}
	return fmt.Errorf("%s is not a valid {{.enum.Name}}", name)
}
{{end}}

{{end}}
